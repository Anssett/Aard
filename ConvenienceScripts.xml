<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Sunday, January 20, 2019, 9:31 AM -->
<!-- MuClient version 5.06-pre -->

<!-- Plugin "ConvenienceScripts" generated by Plugin Wizard -->

<muclient>
<plugin
   name="AlgaruConvenienceScripts"
   author="Algaru"
   id="3d0a536e1264c566c50247b8"
   language="Lua"
   purpose="Collection of useful tools"
   date_written="2019-01-20 09:31:18"
   version="1.0"
   >

</plugin>

<!--  Get our standard constants -->

<include name="constants.lua"/>


<triggers>
  <trigger
   enabled="n"
   match="^You are charged .* gold clan skill fee.$"
   regexp="y"
   name="earthtouch_success"
   script="earthtouch_success"
   sequence="100"
   group="EarthtouchTriggers"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^Oh no!! You just changed .* into a rubber chicken!$"
   regexp="y"
   name="earthtouch_failure"
   script="earthtouch_stop"
   sequence="100"
   group="EarthtouchTriggers"
  >
  </trigger>
  <trigger
   enabled="n"
   match="Damage Type : (?<dtype>[^\s]+)"
   regexp="y"
   name="earthtouch_dtype"
   script="earthtouch_dtype"
   sequence="100"
   group="EarthtouchTriggers"
  >
  </trigger>
  <trigger
   enabled="y"
   omit_from_output="y"
   match="^[^\s]+ is already fully healed.$"
   regexp="y"
   name="ignore_party_heal"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   omit_from_output="y"
   match="^[^\s]+ is already fully refreshed.$"
   regexp="y"
   name="ignore_party_refresh"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   omit_from_output="y"
   match="^You are already fully healed.$"
   regexp="y"
   name="ignore_full_heal"
   sequence="100"
  >
  </trigger>
    
  <trigger
   enabled="y"
   omit_from_output="n"
   match="^(?<greentar>.*) appears much weaker and extremely vulnerable.$"
   regexp="y"
   name="green_death"
   sequence="100"
   script="landed_green_death"
  >
  </trigger>

  <trigger
   enabled="y"
   omit_from_output="y"
   match="^You sense that life will return to this area in roughly (?<mintime>\d+)-(?<maxtime>\d+) minutes.$"
   regexp="y"
   name="catch_sense_life_mins"
   sequence="100"
   script="print_sense_life"
  >
  </trigger>
    
</triggers>

<aliases>
  <alias
   match="^#(?<count>\d*) (?<command>.*)$"
   enabled="y"
   expand_variables="y"
   regexp="y"
   send_to="12"
   sequence="100"
   script="repeat_command"
  >
  </alias>
  
  <alias
   match="mobb"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>require "gmcphelper"
myRoomID = tonumber(gmcp("room.info.num"))
mobaim = tostring(gmcp("char.status.enemy"))
mobpct = tonumber(gmcp("char.status.enemypct"))
if mobpct ~= nil then
&#9;Send ("gte @r[@W"..myRoomID.."@r] [@x195"..mobaim..": @C"..mobpct.."%@r]@w")
else
&#9;ColourNote("darkred","", "[", "white", "", myRoomID, "darkred","","] [", "paleturquoise","", "Not Fighting", "darkred","","]")
end</send>
  </alias>

  <alias match="^et (?<et_item>.*)" 
    enabled="y" 
    expand_variables="y" 
    regexp="y"
    sequence="100" 
    send_to='12'
    script="earthtouch_command" >  
  </alias>  
  <alias
    match="^cspell[ ]+(.*)$"
    regexp="y"
    enabled="y"
    sequence="101"
    script="set_cspell"
    >
  </alias>
  <alias
    match="^cspell[ ]*$"
    regexp="y"
    enabled="y"
    sequence="101"
    script="set_cspell"
    >
  </alias>
  <alias
    match="^cv[ ]*(.*)$"
    regexp="y"
    enabled="y"
    sequence="101"
    script="cast_cspell"
    >
  </alias>
  <alias
    match="^pushtar[ ]+(.*)$"
    regexp="y"
    enabled="y"
    sequence="101"
    script="set_pushtar"
    >
  </alias>
  <alias
    match="^pushtar[ ]*$"
    regexp="y"
    enabled="y"
    sequence="101"
    script="set_pushtar"
    >
  </alias>
  <alias
    match="^pu[ ]+(.*)$"
    regexp="y"
    enabled="y"
    sequence="101"
    script="execute_push"
    >
  </alias>
  <alias
    match="^checkport$"
    regexp="y"
    enabled="y"
    sequence="101"
    script="check_portal"
    >
  </alias>
  <alias
    match="^setport[ ]*$"
    regexp="y"
    enabled="y"
    sequence="101"
    script="check_portal"
    >
  </alias>
  
  <alias
    match="^setport[ ]+(?<portal>.*)$"
    regexp="y"
    enabled="y"
    sequence="101"
    script="set_portal"
    >
  </alias>
  
  <alias
    match="^reset_portal$"
    regexp="y"
    enabled="y"
    sequence="101"
    script="reset_portal"
    >
  </alias>
  <alias
    match="^ent$"
    regexp="y"
    enabled="y"
    sequence="101"
    send_to="10"
    >
    <send>mapper goto 26151</send>
  </alias>
  <alias
    match="^csl$"
    regexp="y"
    enabled="y"
    sequence="101"
    script="execute_sense_life"
    >
  </alias>

  
</aliases>


<script>
<![CDATA[
    function landed_green_death (name, line, args)
        greentar = args.greentar
        Send ("gtell @GGreen death@W (poison/dis) landed on " .. greentar .. ".")
        -- Your acidic venom burns away Jacob's armor.
    end

    function repeat_command (name, line, wildcards)
        count = tonumber(wildcards.count)
        command = wildcards.command
    
        if (count < 0 or count > 10)
        then
            print("INVALID VALUE")
            return
        end
        
        local index = 0
        while (index < count) do
            Send(command)
            index = index + 1
        end
        
    end -- repeat_command

    
    --  Earthtouch Helpers -- 
    function earthtouch_command (name, line, args)
        et_item = args.et_item
        SetVariable("et_item", et_item)
        SaveState()
        EnableTriggerGroup("EarthtouchTriggers", true)
        Send("earthtouch '" .. et_item .. "'")
    end
	
    function earthtouch_success ()
        et_item = GetVariable("et_item")
        Send("identify '" .. et_item .. "'")
    end
    
    function earthtouch_dtype(name, line, args)
        dtype = args.dtype
        SendNoEcho("echo *** Damage type set to @R" .. dtype .. "@w. *** ")
        earthtouch_stop()
    end
    
    function earthtouch_stop ()
        EnableTriggerGroup("EarthtouchTriggers", false)
        SetVariable("et_item", "")
        SaveState()
    end
    
    -- End of Earthtouch Helpers -- 
    
    -- START Portal Helpers --
    
    function reset_portal ()
        portal = get_portal()
        Send('wear "' .. portal .. '"' )
    end
    
    function get_portal ()
        current_portal = GetVariable("saved_portal")
        if (current_portal == nil or current_portal == "" )
        then
            SendNoEcho("echo @b*** No portal set, defaulting to @Raard amulet@b. ***@w ")
            SetVariable("saved_portal", "aard amulet")
        end
        
        return current_portal    
    end
    
    function check_portal ()
        current_portal = get_portal()
        SendNoEcho("echo @b*** Portal is currently @R" .. current_portal .. "@b. ***@w ")
    end
    
    
    function set_portal (name, line, args)
        new_portal = args.portal
        SetVariable("saved_portal", new_portal)
        SaveState()
        SendNoEcho("echo @b*** Setting portal to @R" .. new_portal .. "@b. ***@w ")
    end
    
    -- End of Portal Helpers --
    
    -- Combat skills/spells --
    function set_cspell_helper(cspell)
        SetVariable("cspell", cspell)
        SaveState()
        ColourNote("white", "", "Set combat spell to " , "red", "", GetVariable("cspell"))
    end    

    function set_cspell(name, line, args)
        if args[1] then
            cspell = args[1]
            set_cspell_helper(cspell)
        else
            cspell = GetVariable("cspell") 
            if (cspell == nil or cspell == "")
            then
                ColourNote("white", "", "Combat spell is unset!")
            else
                ColourNote("white", "", "Current combat spell is " , "red", "", cspell)
            end
        end
    end
    
    function cast_cspell(name, line, args)
        cspell = GetVariable("cspell") 
        
        target = args[1]
       
        if (cspell == nil or cspell == "")
        then
            Note("Combat spell is unset!")
        else
            if (target == nil or target == "")
            then
                Send("cast " .. '"' .. cspell .. '"')
            else
                Send("cast " .. '"' .. cspell .. '"' .. " " .. '"' .. target .. '"')
            end
        end

    end
    
    -- End of Combat Spell Helpers 
    
    -- Push helpers --   
    function set_pushtar(name, line, args)
        if args[1] then
            target = args[1]
            set_push_target(target)
        else
            target = GetVariable("pushtar") 
            if (target == nil or target == "")
            then
                ColourNote("white", "", "Push target is unset!")
            else
                ColourNote("white", "", "Push target is " , "red", "", target)
            end
        end        
    end
    
    function set_push_target (target)
        SetVariable("pushtar", target)
        SaveState()
        ColourNote("white", "", "Set push target to " , "red", "", GetVariable("pushtar"))        
    end
    
    function execute_push(name, line, args)
        target = GetVariable("pushtar")
        dir = args[1]
        
        if (target == nil or target == "") 
        then
            ColourNote("white", "", "Target is unset!")
        else
            Send("push " .. target .. " " .. dir)
            Send(dir)
        end
    end

    -- Sense life stuff .. WIP --

    function execute_sense_life()
        Send("cast 'sense life'")
    end
    
    function print_sense_life(name, line, args)  
        minutes = tonumber(args.maxtime)
        converted_time = convert_time(minutes)
    
        approx_time = os.date("%A %I:%M:%S%p local", os.time() + 60*(minutes))

        ColourNote("lightgray", "", "Estimated repop: " 
            .. args.mintime .. "-" .. args.maxtime .. "min",
            "lightgray", "", " " .. converted_time .. "(" .. approx_time .. ")")
    end
    
    function convert_time (minutes) 
        hours = 0
        remaining_minutes = minutes
        days = 0
            
        if minutes <= 60 then return "" end
        
        hours = math.floor(minutes / 60)
        remaining_hours = hours
        
        remaining_minutes = minutes % 60
       
        if hours > 24 then
            days = math.floor(hours / 24);
            remaining_hours = hours % 24
        end
        
        -- work with days, remaining_hours, remaining_minutes
        output_string = ""
        if days > 0 then
            output_string = days .. "d "
        end
        
        if remaining_hours > 0 then
            output_string = output_string .. remaining_hours .. "h "
        end
        
        if remaining_minutes > 0 then
            output_string = output_string .. remaining_minutes .. "m"
        end
        
        return "(" .. output_string .. ")"
    end

]]>
</script>

</muclient>
